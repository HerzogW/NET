/**
 * @file Source code generated by PDL compiler.
 * @version 1.0
 * @sdkversion 5.0.302.319 (production_sdk#058d65f.160330-1230)
 * @schemaversion 1.0.0.2
 */
/// <reference path="../TypeReferences.d.ts" />

import SvgLogo = require ("./../_generated/SvgLogo");
import ClientResources = require ("ClientResources");
import Browse = require ("./../Browse/BrowseArea");
import Resource = require ("./../Resource/ResourceArea");
export = ExtensionDefinition;
module ExtensionDefinition {
    module Internal {
        var untypedDefinition: any = {
  "commandsCatalog": [
    {
      "name": "SettingsCommand",
      "text": ClientResources.ResourceBlade.SettingsCommand.resourceKey,
      "viewModel": "Resource$SettingsCommandViewModel",
      "details": {
        "blade": "SettingsBlade",
        "additionalInputArguments": [
          {
            "property": "id",
            "valuesFrom": [
              {
                "referenceType": 4,
                "property": "content.resourceId"
              }
            ]
          }
        ]
      },
      "assetType": "CognitiveServicesAccount",
      "assetIdInputProperty": "resourceId",
      "commandKind": 2,
      "bindings": [
        {
          "property": "resourceId",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ]
    },
    {
      "name": "DeleteCommand",
      "text": ClientResources.ResourceBlade.DeleteCommand.resourceKey,
      "viewModel": "Resource$DeleteCommandViewModel",
      "commandKind": 0,
      "bindings": [
        {
          "property": "resourceId",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ]
    }
  ],
  "name": "Microsoft_Azure_ProjectOxford",
  "version": "1.0",
  "hash": "47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=",
  "schemaVersion": "1.0.0.2",
  "sdkVersion": "5.0.302.319 (production_sdk#058d65f.160330-1230)",
  "isPreview": true,
  "partsCatalog": [
    {
      "name": "ResourcePart",
      "viewModel": "Browse$ResourcePartViewModel",
      "partKind": 22,
      "canUseOldInputVersions": false,
      "inputs": [
        "id"
      ],
      "bindings": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "details": [
        {
          "blade": "ResourceBlade",
          "selectableBindings": [
            {
              "property": "id",
              "valuesFrom": [
                {
                  "referenceType": 0,
                  "property": "content.assetId"
                }
              ]
            }
          ]
        }
      ],
      "assetType": "ApiAccount",
      "assetIdInputProperty": "id"
    },
    {
      "name": "CognitiveServicesResourcePart",
      "viewModel": "Browse$ResourcePartViewModel",
      "partKind": 22,
      "canUseOldInputVersions": false,
      "inputs": [
        "id"
      ],
      "bindings": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "details": [
        {
          "blade": "ResourceBlade",
          "selectableBindings": [
            {
              "property": "id",
              "valuesFrom": [
                {
                  "referenceType": 0,
                  "property": "content.assetId"
                }
              ]
            }
          ]
        }
      ],
      "assetType": "CognitiveServicesAccount",
      "assetIdInputProperty": "id"
    },
    {
      "partGalleryInfo": {
        "title": ClientResources.ResourceBlade.eventsInThePastWeekLauncherPartTitle,
        "category": ClientResources.ResourceBlade.lensOperationsTitle,
        "thumbnail": MsPortalFx.Base.Images.Polychromatic.Log(),
        "thumbnailStretch": 0,
        "pivotKind": 2
      },
      "inputDefinitions": [
        {
          "name": "id",
          "type": "MsPortalFx.ViewModels.ResourceId",
          "optional": false,
          "isAssetId": true
        }
      ],
      "reference": {
        "partTypeName": "EventsSummaryPart",
        "extension": "Microsoft_Azure_Insights",
        "bindings": [
          {
            "property": "resourceId",
            "valuesFrom": [
              {
                "referenceType": 7,
                "property": "content.apiAccountId"
              }
            ]
          },
          {
            "property": "options",
            "valuesFrom": [
              {
                "referenceType": 7,
                "property": "content.eventsOptions"
              }
            ]
          }
        ],
        "initialSize": 2
      },
      "name": "EventsSummaryPart",
      "viewModel": "Resource$EventsPartAdapterViewModel",
      "partKind": 0,
      "initialSize": 2,
      "assetType": "CognitiveServicesAccount",
      "assetIdInputProperty": "id"
    },
    {
      "partGalleryInfo": {
        "title": ClientResources.ResourceBlade.pricingTierPartTitle,
        "category": ClientResources.ResourceBlade.lensUsageTitle,
        "thumbnail": MsPortalFx.Base.Images.Polychromatic.BillingHub(),
        "thumbnailStretch": 0,
        "pivotKind": 2
      },
      "inputDefinitions": [
        {
          "name": "id",
          "type": "MsPortalFx.ViewModels.ResourceId",
          "optional": false,
          "isAssetId": true
        }
      ],
      "reference": {
        "partTypeName": "PricingTierLauncherV3",
        "extension": "HubsExtension",
        "bindings": [
          {
            "property": "entityId",
            "valuesFrom": [
              {
                "referenceType": 7,
                "property": "content.apiAccountId"
              }
            ]
          }
        ],
        "initialSize": 3,
        "extenderViewModel": "Resource$ApiAccountPricingTierV3LauncherExtender"
      },
      "name": "PricingTierPart",
      "viewModel": "Resource$PricingTierPartAdapterViewModel",
      "partKind": 0,
      "initialSize": 3,
      "assetType": "CognitiveServicesAccount",
      "assetIdInputProperty": "id"
    }
  ],
  "blades": [
    {
      "name": "CreateBlade",
      "viewModelName": "Resource$CognitiveServicesCreateBladeViewModel",
      "lenses": [],
      "width": 0,
      "style": 3,
      "actionBar": {
        "name": "",
        "actionBarKind": 1,
        "bindings": []
      },
      "templateBlade": {
        "htmlTemplate": "pdc278740673c0a43fdbf9639bc7e6b1a07",
        "parameterProvider": true,
        "details": [
          {
            "selectablePath": "content.apiTypeSelector.selectable",
            "blade": "CognitiveServicesApiType",
            "parameterCollector": "content.apiTypeCollector"
          },
          {
            "selectablePath": "content.accountSpecSelector.control.selectable",
            "blade": "ApiAccountSpecPicker",
            "parameterCollector": "content.accountSpecSelector.collector"
          },
          {
            "selectablePath": "content.legalSelector.selectable",
            "blade": "CreationLegalBlade",
            "parameterCollector": "content.legalCollector"
          }
        ],
        "partSize": 0
      }
    },
    {
      "name": "CreationLegalBlade",
      "viewModelName": "Resource$CreationLegalBladeViewModel",
      "lenses": [],
      "actionBar": {
        "name": "",
        "actionBarKind": 6,
        "bindings": []
      },
      "templateBlade": {
        "htmlTemplate": "pdc9f14d4c3221a4e4085fb7d0283172703",
        "parameterProvider": true,
        "partSize": 0
      }
    },
    {
      "name": "CognitiveServicesApiType",
      "viewModelName": "Resource$CognitiveServicesApiTypeBladeViewModel",
      "lenses": [
        {
          "name": "CognitiveServicesApiType_lens1",
          "partInstances": [
            {
              "name": "PickerPart",
              "inline": {
                "viewModel": "Resource$ApiTypePartViewModel",
                "partKind": 0,
                "inputs": [],
                "bindings": [],
                "htmlTemplate": "pdc1d22085b30fb4f57a46120ce6f949171",
                "details": [
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.addNewGrid.selectableData"
                          }
                        ]
                      }
                    ],
                    "parameterCollector": "content.addNewItemCollector"
                  }
                ],
                "initialSize": 8,
                "supportedSizes": [
                  8
                ]
              },
              "parameterProvider": true
            }
          ]
        }
      ],
      "width": 2,
      "locked": true,
      "pinnable": false,
      "style": 2,
      "actionBar": {
        "name": "",
        "actionBarKind": 2,
        "bindings": [
          {
            "property": "showSelectButton",
            "valuesFrom": [
              {
                "referenceType": 0,
                "property": "content.showSelectButton",
                "part": "PickerPart"
              }
            ]
          },
          {
            "property": "triggerSelectAction",
            "valuesFrom": [
              {
                "referenceType": 0,
                "property": "content.triggerSelectAction",
                "part": "PickerPart"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "PropertiesBlade",
      "inputs": [
        "id"
      ],
      "viewModelName": "Resource$PropertiesBladeViewModel",
      "lenses": [
        {
          "name": "PropertiesBlade_lens1",
          "partInstances": [
            {
              "name": "PropertiesPart",
              "inline": {
                "viewModel": "Resource$PropertiesPartViewModel",
                "partKind": 24,
                "inputs": [
                  "id"
                ],
                "bindings": [
                  {
                    "property": "id",
                    "valuesFrom": [
                      {
                        "referenceType": 1,
                        "property": "id"
                      }
                    ]
                  }
                ],
                "details": [
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.selection"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.moveResourceSelection"
                          }
                        ]
                      }
                    ],
                    "outputArguments": [
                      {
                        "property": "actionBarOutput",
                        "valuesFrom": [
                          {
                            "referenceType": 1,
                            "property": "actionBarOutput"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "initialSize": 8
              }
            }
          ]
        }
      ],
      "viewModelInputs": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "width": 0,
      "locked": true,
      "style": 6
    },
    {
      "name": "ApiAccountSpecPicker",
      "viewModelName": "Resource$ApiAccountSpecPickerBladeViewModel",
      "lenses": [
        {
          "name": "BrowseAllLens",
          "partInstances": [
            {
              "name": "BrowseAllPart",
              "reference": {
                "partTypeName": "SpecPickerListViewPartV3",
                "extension": "HubsExtension",
                "bindings": [],
                "initialSize": 9,
                "extenderViewModel": "Resource$ApiAccountSpecPickerExtender"
              },
              "parameterProvider": true
            }
          ]
        }
      ],
      "width": 1,
      "locked": true,
      "pinnable": false,
      "style": 3,
      "actionBar": {
        "name": "",
        "actionBarKind": 2,
        "bindings": [
          {
            "property": "valid",
            "valuesFrom": [
              {
                "referenceType": 0,
                "property": "content.valid",
                "part": "BrowseAllPart"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "KeySettingBlade",
      "inputs": [
        "id"
      ],
      "commandGroup": "KeySettingBladeCommands",
      "viewModelName": "Resource$KeySettingsBladeViewModel",
      "lenses": [
        {
          "name": "OxfordKeysLens",
          "partInstances": [
            {
              "name": "KeysPropertiesPart",
              "inline": {
                "viewModel": "Resource$KeysPropertiesPartViewModel",
                "partKind": 24,
                "inputs": [
                  "resourceId"
                ],
                "bindings": [
                  {
                    "property": "resourceId",
                    "valuesFrom": [
                      {
                        "referenceType": 1,
                        "property": "id"
                      }
                    ]
                  }
                ],
                "details": [],
                "initialSize": 8
              }
            }
          ]
        }
      ],
      "viewModelInputs": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "width": 0,
      "locked": true,
      "style": 8
    },
    {
      "name": "ResourceBlade",
      "inputs": [
        "id"
      ],
      "templateKeyInputs": [
        "id"
      ],
      "viewModelName": "Resource$ResourceBladeViewModel",
      "lenses": [
        {
          "isSummary": true,
          "name": "ResourceSummary",
          "partInstances": [
            {
              "name": "ResourceSummaryPart",
              "inline": {
                "viewModel": "Resource$ResourceSummaryPartViewModel",
                "partKind": 30,
                "inputs": [
                  "resourceId"
                ],
                "bindings": [
                  {
                    "property": "resourceId",
                    "valuesFrom": [
                      {
                        "referenceType": 1,
                        "property": "id"
                      }
                    ]
                  }
                ],
                "details": [
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.selection"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.asyncSelection"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.tagsSelectable"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.accessSelectable"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.settingsSelectable"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.quickStartSelectable"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.keysSelectable"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.moveResourceSelection"
                          }
                        ]
                      }
                    ],
                    "outputArguments": [
                      {
                        "property": "actionBarOutput",
                        "valuesFrom": [
                          {
                            "referenceType": 1,
                            "property": "actionBarOutput"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "initialSize": 10,
                "partState": {
                  "inputIdentityProperties": [
                    "content.collapsed"
                  ]
                }
              }
            }
          ]
        }
      ],
      "commandGroupReference": {
        "name": "ResourceCommands",
        "commands": [
          {
            "name": "SettingsCommand",
            "bindings": [
              {
                "property": "resourceId",
                "valuesFrom": [
                  {
                    "referenceType": 1,
                    "property": "id"
                  }
                ]
              }
            ]
          },
          {
            "name": "MoveResourceGroupCommand",
            "bindings": [
              {
                "property": "resourceId",
                "valuesFrom": [
                  {
                    "referenceType": 1,
                    "property": "id"
                  }
                ]
              }
            ]
          },
          {
            "name": "DeleteCommand",
            "bindings": [
              {
                "property": "resourceId",
                "valuesFrom": [
                  {
                    "referenceType": 1,
                    "property": "id"
                  }
                ]
              }
            ]
          }
        ]
      },
      "viewModelInputs": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "assetType": "CognitiveServicesAccount",
      "assetIdInputProperty": "id",
      "pinnedPart": "CognitiveServicesResourcePart",
      "style": 1
    },
    {
      "name": "QuickStartBlade",
      "inputs": [
        "id"
      ],
      "viewModelName": "Resource$QuickStartBladeViewModel",
      "lenses": [
        {
          "name": "QuickStartBlade_lens1",
          "partInstances": [
            {
              "name": "QuickStartPart",
              "inline": {
                "viewModel": "Resource$QuickStartPartViewModel",
                "partKind": 23,
                "inputs": [
                  "id"
                ],
                "bindings": [
                  {
                    "property": "id",
                    "valuesFrom": [
                      {
                        "referenceType": 1,
                        "property": "id"
                      }
                    ]
                  }
                ],
                "details": [
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.selection"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "initialSize": 8
              }
            }
          ]
        }
      ],
      "viewModelInputs": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "width": 1,
      "locked": true,
      "style": 5
    },
    {
      "name": "SettingsBlade",
      "inputs": [
        "id"
      ],
      "viewModelName": "Resource$SettingsBladeViewModel",
      "lenses": [
        {
          "name": "SettingListLens",
          "partInstances": [
            {
              "name": "SettingListPart",
              "inline": {
                "viewModel": "Resource$SettingsPartViewModel",
                "partKind": 0,
                "inputs": [
                  "id"
                ],
                "bindings": [
                  {
                    "property": "id",
                    "valuesFrom": [
                      {
                        "referenceType": 1,
                        "property": "id"
                      }
                    ]
                  }
                ],
                "htmlTemplate": "pdcb5cd57f3c4ad4e499ccbab6f9a0f6314",
                "details": [
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.pcSelectable"
                          }
                        ]
                      }
                    ],
                    "parameterCollector": "content.parameterCollector"
                  },
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.selectable"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "initialSize": 8,
                "supportedSizes": [
                  8
                ],
                "viewStateProperties": [
                  "content.settingList.selectableData.activatedItems",
                  "content.settingList.selectableData.selectedItems"
                ]
              }
            }
          ]
        }
      ],
      "viewModelInputs": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ],
      "width": 0,
      "locked": true,
      "style": 11
    },
    {
      "name": "BlankBlade",
      "inputs": [
        "id"
      ],
      "viewModelName": "Resource$BlankBladeBladeViewModel",
      "lenses": [],
      "viewModelInputs": [
        {
          "property": "id",
          "valuesFrom": [
            {
              "referenceType": 1,
              "property": "id"
            }
          ]
        }
      ]
    },
    {
      "name": "OxfordCreateBlade",
      "viewModelName": "Resource$OxfordCreateBladeViewModel",
      "lenses": [],
      "width": 2,
      "style": 2,
      "actionBar": {
        "name": "",
        "actionBarKind": 0,
        "bindings": []
      },
      "templateBlade": {
        "htmlTemplate": "pdc278740673c0a43fdbf9639bc7e6b1a07",
        "parameterProvider": true,
        "details": [
          {
            "selectablePath": "content.apiTypeSelector.selectable",
            "blade": "ProjectOxfordApiType",
            "parameterCollector": "content.apiTypeCollector"
          },
          {
            "selectablePath": "content.accountSpecSelector.control.selectable",
            "blade": "ApiAccountSpecPicker",
            "parameterCollector": "content.accountSpecSelector.collector"
          }
        ],
        "partSize": 0
      }
    },
    {
      "name": "ProjectOxfordApiType",
      "viewModelName": "Resource$OxfordApiTypeBladeViewModel",
      "lenses": [
        {
          "name": "ProjectOxfordApiType_lens1",
          "partInstances": [
            {
              "name": "PickerPart",
              "inline": {
                "viewModel": "Resource$ApiTypePartViewModel",
                "partKind": 0,
                "inputs": [],
                "bindings": [],
                "htmlTemplate": "pdc1d22085b30fb4f57a46120ce6f949171",
                "details": [
                  {
                    "invocationInputArguments": [
                      {
                        "valuesFrom": [
                          {
                            "referenceType": 0,
                            "property": "content.addNewGrid.selectableData"
                          }
                        ]
                      }
                    ],
                    "parameterCollector": "content.addNewItemCollector"
                  }
                ],
                "initialSize": 8,
                "supportedSizes": [
                  8
                ]
              },
              "parameterProvider": true
            }
          ]
        }
      ],
      "width": 2,
      "locked": true,
      "pinnable": false,
      "style": 2,
      "actionBar": {
        "name": "",
        "actionBarKind": 2,
        "bindings": [
          {
            "property": "showSelectButton",
            "valuesFrom": [
              {
                "referenceType": 0,
                "property": "content.showSelectButton",
                "part": "PickerPart"
              }
            ]
          },
          {
            "property": "triggerSelectAction",
            "valuesFrom": [
              {
                "referenceType": 0,
                "property": "content.triggerSelectAction",
                "part": "PickerPart"
              }
            ]
          }
        ]
      }
    }
  ],
  "commandGroups": [
    {
      "name": "ResourceCommands",
      "commands": [
        {
          "name": "SettingsCommand",
          "text": ClientResources.ResourceBlade.SettingsCommand.resourceKey,
          "viewModel": "Resource$SettingsCommandViewModel",
          "details": {
            "blade": "SettingsBlade",
            "additionalInputArguments": [
              {
                "property": "id",
                "valuesFrom": [
                  {
                    "referenceType": 4,
                    "property": "content.resourceId"
                  }
                ]
              }
            ]
          },
          "assetType": "CognitiveServicesAccount",
          "assetIdInputProperty": "resourceId",
          "commandKind": 2,
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 1,
                  "property": "id"
                }
              ]
            }
          ]
        },
        {
          "name": "MoveResourceGroupCommand",
          "reference": {
            "commandType": "MoveResourceCommand",
            "extension": "HubsExtension"
          },
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 5,
                  "property": "constant_unknownResourceIdShouldBeOverriddenInBlade",
                  "constantValue": "unknownResourceIdShouldBeOverriddenInBlade"
                }
              ]
            }
          ]
        },
        {
          "name": "DeleteCommand",
          "text": ClientResources.ResourceBlade.DeleteCommand.resourceKey,
          "viewModel": "Resource$DeleteCommandViewModel",
          "commandKind": 0,
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 1,
                  "property": "id"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "BrowseAccountCommands",
      "commands": [
        {
          "name": "SettingsCommand",
          "reference": {
            "commandType": "SettingsCommand"
          },
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 1,
                  "property": "id"
                }
              ]
            }
          ]
        },
        {
          "name": "DeleteCommand",
          "reference": {
            "commandType": "DeleteCommand"
          },
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 1,
                  "property": "id"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "KeySettingBladeCommands",
      "commands": [
        {
          "name": "GeneratePrimaryCommand",
          "text": ClientResources.KeyManagementBlade.RegenerateKeysCommand.regeneratePrimary,
          "viewModel": "Resource$GeneratePrimaryCommandViewModel",
          "commandKind": 0,
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 1,
                  "property": "id"
                }
              ]
            }
          ]
        },
        {
          "name": "GenerateSecondaryCommand",
          "text": ClientResources.KeyManagementBlade.RegenerateKeysCommand.regenerateSecondary,
          "viewModel": "Resource$GenerateSecondaryCommandViewModel",
          "commandKind": 0,
          "bindings": [
            {
              "property": "resourceId",
              "valuesFrom": [
                {
                  "referenceType": 1,
                  "property": "id"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "htmlTemplates": {
    "pdc278740673c0a43fdbf9639bc7e6b1a07": {
      "file": "Create.html",
      "content": "<div class=\"msportalfx-form msportalfx-form-create\"> <div data-bind=\"formElement: svgContent\"></div> <div data-bind=\"formElement: svgLogoContent\"></div> <!--<div data-bind=\"formElement: nameTextBox\"></div>\r\n    <div data-bind=\"formElement: apiTypeSelector\"></div>\r\n    <div data-bind=\"formElement: accountSpecSelector.control\"></div>\r\n    <div data-bind=\"formElement: subscriptionDropDown.control\"></div>\r\n    <div data-bind=\"formElement: resourceGroupDropDown.control\"></div>\r\n    <div data-bind=\"formElement: locationDropDown.control\"></div>\r\n    <div data-bind=\"formElement: legalSelector, visible: showLegalTerms\"></div>--> </div>"
    },
    "pdc9f14d4c3221a4e4085fb7d0283172703": {
      "file": "LegalForm.html",
      "content": "<div class=\"msportalfx-form\" data-bind=\"html: legalTermHtml\"> </div> "
    },
    "pdc1d22085b30fb4f57a46120ce6f949171": {
      "file": "Client/Resource/Create/CognitiveServicesCreate.pdl",
      "content": "<div data-bind=\"pcPickerV3: $root\"></div>"
    },
    "pdcb5cd57f3c4ad4e499ccbab6f9a0f6314": {
      "file": "Client/Resource/Settings/SettingsBlade.pdl",
      "content": "<div data-bind=\"pcGrid: settingList\"></div>"
    }
  },
  "styleSheets": []
};
        export var definition: MsPortalFx.Extension.Definition = untypedDefinition;
    }
    export var definitionName: string = "Microsoft_Azure_ProjectOxford";
    export function getDefinition(): MsPortalFx.Extension.Definition {
        if (Internal.definition) {
                            var def = Internal.definition;
                            Internal.definition = null;
                            return def;
                        }

                    throw new Error("Extension definition is no longer available.");
    }
    export module External {
        export module Microsoft_Azure_Insights {
            export var name: string = "Microsoft_Azure_Insights";
            export module Blades {
                export module DiagnosticsConfigurationUpdateBlade {
                    export var name: string = "DiagnosticsConfigurationUpdateBlade";
                    export module Inputs {
                        export var resourceId: string = "resourceId";
                        export var options: string = "options";
                    }
                    export module Outputs {
                        export var metricQuerySetting: string = "metricQuerySetting";
                    }
                }
                export module ScaleSettingBlade {
                    export var name: string = "ScaleSettingBlade";
                    export module Inputs {
                        export var resourceId: string = "resourceId";
                        export var options: string = "options";
                    }
                    export module Outputs {
                    }
                }
            }
        }
        export module Microsoft_Azure_AD {
            export var name: string = "Microsoft_Azure_AD";
            export module Blades {
            }
        }
        export module HubsExtension {
            export var name: string = "HubsExtension";
            export module Blades {
                export module DeployFromTemplateBlade {
                    export var name: string = "DeployFromTemplateBlade";
                    export module Inputs {
                        export var internal_bladeCallerParams: string = "internal_bladeCallerParams";
                    }
                    export module Outputs {
                    }
                }
                export module TemplateEditorBlade {
                    export var name: string = "TemplateEditorBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module ParametersEditorBlade {
                    export var name: string = "ParametersEditorBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module ResourceGroupPickerV3Blade {
                    export var name: string = "ResourceGroupPickerV3Blade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module SubscriptionPickerV3Blade {
                    export var name: string = "SubscriptionPickerV3Blade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module LocationPickerV3Blade {
                    export var name: string = "LocationPickerV3Blade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module SettingsBlade {
                    export var name: string = "SettingsBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module DeploymentDetailsBlade {
                    export var name: string = "DeploymentDetailsBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module ResourceGroupMapBlade {
                    export var name: string = "ResourceGroupMapBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module BrowseResourceBlade {
                    export var name: string = "BrowseResourceBlade";
                    export module Inputs {
                        export var resourceType: string = "resourceType";
                    }
                    export module Outputs {
                    }
                }
                export module BrowseAllResourcesBlade {
                    export var name: string = "BrowseAllResourcesBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module BrowseAllFilteredResourcesBlade {
                    export var name: string = "BrowseAllFilteredResourcesBlade";
                    export module Inputs {
                        export var filter: string = "filter";
                    }
                    export module Outputs {
                    }
                }
                export module BrowseResourceGroupBlade {
                    export var name: string = "BrowseResourceGroupBlade";
                    export module Inputs {
                        export var resourceType: string = "resourceType";
                    }
                    export module Outputs {
                    }
                }
                export module MapResourceGroupBlade {
                    export var name: string = "MapResourceGroupBlade";
                    export module Inputs {
                        export var id: string = "id";
                    }
                    export module Outputs {
                    }
                }
                export module UnauthorizedAssetBlade {
                    export var name: string = "UnauthorizedAssetBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module NotFoundAssetBlade {
                    export var name: string = "NotFoundAssetBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
                export module UnavailableAssetBlade {
                    export var name: string = "UnavailableAssetBlade";
                    export module Inputs {
                    }
                    export module Outputs {
                    }
                }
            }
        }
    }
    export module AssetTypes {
        export module ApiAccount {
            export var name: string = "ApiAccount";
        }
        export module CognitiveServicesAccount {
            export var name: string = "CognitiveServicesAccount";
        }
    }
    export module AssetTypeNames {
        export var apiAccount: string = AssetTypes.ApiAccount.name;
        export var cognitiveServicesAccount: string = AssetTypes.CognitiveServicesAccount.name;
    }
    export module BladeNames {
        export var createBlade: string = "CreateBlade";
        export var creationLegalBlade: string = "CreationLegalBlade";
        export var cognitiveServicesApiType: string = "CognitiveServicesApiType";
        export var propertiesBlade: string = "PropertiesBlade";
        export var apiAccountSpecPicker: string = "ApiAccountSpecPicker";
        export var keySettingBlade: string = "KeySettingBlade";
        export var resourceBlade: string = "ResourceBlade";
        export var quickStartBlade: string = "QuickStartBlade";
        export var settingsBlade: string = "SettingsBlade";
        export var blankBlade: string = "BlankBlade";
        export var oxfordCreateBlade: string = "OxfordCreateBlade";
        export var projectOxfordApiType: string = "ProjectOxfordApiType";
    }
    export module CommandGroupNames {
        export var resourceCommands: string = "ResourceCommands";
        export var browseAccountCommands: string = "BrowseAccountCommands";
    }
    export module EventTypes {
    }
    export module NotificationDefinitions {
    }
    export module ViewModels {
        export module Browse {
            export module ResourcePartViewModel {
                export interface InputsContract {
                    id?: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.AssetPart {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                    assetId: any;
                }
            }
            export module AssetTypeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.Assets.BrowseConfigContract,MsPortalFx.Assets.SupplementalDataContract {
                }
            }
        }
        export module Resource {
            export module CognitiveServicesCreateBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Properties$accountSpecSelector$0 {
                    collector: MsPortalFx.ViewModels.ParameterCollector<any>;
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    actionBar: MsPortalFx.ViewModels.ActionBars.Base.Contract;
                    parameterProvider: MsPortalFx.ViewModels.ParameterProvider<any, any>;
                    apiTypeCollector: MsPortalFx.ViewModels.ParameterCollector<any>;
                    accountSpecSelector: Properties$accountSpecSelector$0 | KnockoutObservableBase<Properties$accountSpecSelector$0>;
                    legalCollector: MsPortalFx.ViewModels.ParameterCollector<any>;
                }
            }
            export module CreationLegalBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    actionBar: MsPortalFx.ViewModels.ActionBars.Base.Contract;
                    parameterProvider: MsPortalFx.ViewModels.ParameterProvider<any, any>;
                }
            }
            export module CognitiveServicesApiTypeBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                }
            }
            export module ApiTypePartViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.ParameterCollectionV3.Pickers.PickerBase<any, any>,MsPortalFx.ViewModels.PartContent {
                    parameterProvider: MsPortalFx.ViewModels.ParameterProvider<any, any>;
                }
            }
            export module PropertiesBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module PropertiesPartViewModel {
                export interface InputsContract {
                    id: any;
                    actionBarOutput?: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.Properties.Contract {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                    moveResourceSelection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                }
            }
            export module ApiAccountSpecPickerBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                }
            }
            export module ApiAccountSpecPickerExtender {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract {
                }
            }
            export module KeySettingsBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module KeysPropertiesPartViewModel {
                export interface InputsContract {
                    resourceId: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.Properties.Contract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module GeneratePrimaryCommandViewModel {
                export interface InputsContract {
                    resourceId: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.CommandContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module GenerateSecondaryCommandViewModel {
                export interface InputsContract {
                    resourceId: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.CommandContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module ResourceBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module ResourceSummaryPartViewModel {
                export interface InputsContract {
                    resourceId: any;
                    actionBarOutput?: any;
                }
                export interface Settings$content$0 {
                    collapsed: any;
                }
                export interface SettingsContract {
                    content?: Settings$content$0;
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.ResourceSummary.Contract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                    selection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    asyncSelection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    tagsSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    accessSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    settingsSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    quickStartSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    keysSelectable: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                    moveResourceSelection: MsPortalFx.ViewModels.Selectable<any> | MsPortalFx.ViewModels.SetSelection<any> | KnockoutObservable<any> | MsPortalFx.ViewModels.Internal.Selection2.SelectableSetContract<any, any>;
                }
            }
            export module QuickStartBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module QuickStartPartViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.PartContent,MsPortalFx.ViewModels.Parts.InfoList.ViewModel {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module SettingsBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module SettingsPartViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.Parts.SettingList.ViewModelV2,MsPortalFx.ViewModels.PartContent {
                    onInputsSet?(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module BlankBladeBladeViewModel {
                export interface InputsContract {
                    id: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module OxfordCreateBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Properties$accountSpecSelector$0 {
                    collector: MsPortalFx.ViewModels.ParameterCollector<any>;
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                    actionBar: MsPortalFx.ViewModels.ActionBars.Base.Contract;
                    parameterProvider: MsPortalFx.ViewModels.ParameterProvider<any, any>;
                    apiTypeCollector: MsPortalFx.ViewModels.ParameterCollector<any>;
                    accountSpecSelector: Properties$accountSpecSelector$0 | KnockoutObservableBase<Properties$accountSpecSelector$0>;
                }
            }
            export module OxfordApiTypeBladeViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.BladeContract {
                }
            }
            export module EventsPartAdapterViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract {
                }
            }
            export module PricingTierPartAdapterViewModel {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract {
                }
            }
            export module ApiAccountPricingTierV3LauncherExtender {
                export interface InputsContract {
                }
                export interface SettingsContract {
                }
                export interface Contract {
                }
            }
            export module SettingsCommandViewModel {
                export interface InputsContract {
                    resourceId: any;
                }
                export interface SettingsContract {
                }
                export interface Contract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
            export module DeleteCommandViewModel {
                export interface InputsContract {
                    resourceId: any;
                }
                export interface SettingsContract {
                }
                export interface Contract extends MsPortalFx.ViewModels.CommandContract {
                    onInputsSet(inputs: InputsContract, settings: SettingsContract): MsPortalFx.Base.Promise;
                }
            }
        }
    }
    export interface Browse$ResourcePartViewModel$Contract extends ViewModels.Browse.ResourcePartViewModel.Contract {
    }
    export interface Resource$CognitiveServicesCreateBladeViewModel$Contract extends ViewModels.Resource.CognitiveServicesCreateBladeViewModel.Contract {
    }
    export interface Resource$CreationLegalBladeViewModel$Contract extends ViewModels.Resource.CreationLegalBladeViewModel.Contract {
    }
    export interface Resource$CognitiveServicesApiTypeBladeViewModel$Contract extends ViewModels.Resource.CognitiveServicesApiTypeBladeViewModel.Contract {
    }
    export interface Resource$ApiTypePartViewModel$Contract extends ViewModels.Resource.ApiTypePartViewModel.Contract {
    }
    export interface Resource$PropertiesBladeViewModel$Contract extends ViewModels.Resource.PropertiesBladeViewModel.Contract {
    }
    export interface Resource$PropertiesPartViewModel$Contract extends ViewModels.Resource.PropertiesPartViewModel.Contract {
    }
    export interface Resource$ApiAccountSpecPickerBladeViewModel$Contract extends ViewModels.Resource.ApiAccountSpecPickerBladeViewModel.Contract {
    }
    export interface Resource$ApiAccountSpecPickerExtender$Contract extends ViewModels.Resource.ApiAccountSpecPickerExtender.Contract {
    }
    export interface Resource$KeySettingsBladeViewModel$Contract extends ViewModels.Resource.KeySettingsBladeViewModel.Contract {
    }
    export interface Resource$KeysPropertiesPartViewModel$Contract extends ViewModels.Resource.KeysPropertiesPartViewModel.Contract {
    }
    export interface Resource$GeneratePrimaryCommandViewModel$Contract extends ViewModels.Resource.GeneratePrimaryCommandViewModel.Contract {
    }
    export interface Resource$GenerateSecondaryCommandViewModel$Contract extends ViewModels.Resource.GenerateSecondaryCommandViewModel.Contract {
    }
    export interface Resource$ResourceBladeViewModel$Contract extends ViewModels.Resource.ResourceBladeViewModel.Contract {
    }
    export interface Resource$ResourceSummaryPartViewModel$Contract extends ViewModels.Resource.ResourceSummaryPartViewModel.Contract {
    }
    export interface Resource$QuickStartBladeViewModel$Contract extends ViewModels.Resource.QuickStartBladeViewModel.Contract {
    }
    export interface Resource$QuickStartPartViewModel$Contract extends ViewModels.Resource.QuickStartPartViewModel.Contract {
    }
    export interface Resource$SettingsBladeViewModel$Contract extends ViewModels.Resource.SettingsBladeViewModel.Contract {
    }
    export interface Resource$SettingsPartViewModel$Contract extends ViewModels.Resource.SettingsPartViewModel.Contract {
    }
    export interface Resource$BlankBladeBladeViewModel$Contract extends ViewModels.Resource.BlankBladeBladeViewModel.Contract {
    }
    export interface Resource$OxfordCreateBladeViewModel$Contract extends ViewModels.Resource.OxfordCreateBladeViewModel.Contract {
    }
    export interface Resource$OxfordApiTypeBladeViewModel$Contract extends ViewModels.Resource.OxfordApiTypeBladeViewModel.Contract {
    }
    export interface Resource$EventsPartAdapterViewModel$Contract extends ViewModels.Resource.EventsPartAdapterViewModel.Contract {
    }
    export interface Resource$PricingTierPartAdapterViewModel$Contract extends ViewModels.Resource.PricingTierPartAdapterViewModel.Contract {
    }
    export interface Resource$ApiAccountPricingTierV3LauncherExtender$Contract extends ViewModels.Resource.ApiAccountPricingTierV3LauncherExtender.Contract {
    }
    export interface Resource$SettingsCommandViewModel$Contract extends ViewModels.Resource.SettingsCommandViewModel.Contract {
    }
    export interface Resource$DeleteCommandViewModel$Contract extends ViewModels.Resource.DeleteCommandViewModel.Contract {
    }
    export interface Browse$AssetTypeViewModel$Contract extends ViewModels.Browse.AssetTypeViewModel.Contract {
    }
    export interface BrowseDataContextContainer extends FxImpl.Extension.DataContextContainer<Browse.DataContext> {
    }
    export interface BrowseViewModelFactories extends BrowseDataContextContainer {
        ResourcePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Browse$ResourcePartViewModel$Contract>;
        AssetTypeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Browse$AssetTypeViewModel$Contract>;
    }
    export interface ResourceDataContextContainer extends FxImpl.Extension.DataContextContainer<Resource.DataContext> {
    }
    export interface ResourceViewModelFactories extends ResourceDataContextContainer {
        CognitiveServicesCreateBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$CognitiveServicesCreateBladeViewModel$Contract>;
        CreationLegalBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$CreationLegalBladeViewModel$Contract>;
        CognitiveServicesApiTypeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$CognitiveServicesApiTypeBladeViewModel$Contract>;
        ApiTypePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ApiTypePartViewModel$Contract>;
        PropertiesBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$PropertiesBladeViewModel$Contract>;
        PropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$PropertiesPartViewModel$Contract>;
        ApiAccountSpecPickerBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ApiAccountSpecPickerBladeViewModel$Contract>;
        ApiAccountSpecPickerExtender(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ApiAccountSpecPickerExtender$Contract>;
        KeySettingsBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$KeySettingsBladeViewModel$Contract>;
        KeysPropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$KeysPropertiesPartViewModel$Contract>;
        GeneratePrimaryCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$GeneratePrimaryCommandViewModel$Contract>;
        GenerateSecondaryCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$GenerateSecondaryCommandViewModel$Contract>;
        ResourceBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ResourceBladeViewModel$Contract>;
        ResourceSummaryPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ResourceSummaryPartViewModel$Contract>;
        QuickStartBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$QuickStartBladeViewModel$Contract>;
        QuickStartPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$QuickStartPartViewModel$Contract>;
        SettingsBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$SettingsBladeViewModel$Contract>;
        SettingsPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$SettingsPartViewModel$Contract>;
        BlankBladeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$BlankBladeBladeViewModel$Contract>;
        OxfordCreateBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$OxfordCreateBladeViewModel$Contract>;
        OxfordApiTypeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$OxfordApiTypeBladeViewModel$Contract>;
        EventsPartAdapterViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$EventsPartAdapterViewModel$Contract>;
        PricingTierPartAdapterViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$PricingTierPartAdapterViewModel$Contract>;
        ApiAccountPricingTierV3LauncherExtender(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$ApiAccountPricingTierV3LauncherExtender$Contract>;
        SettingsCommandViewModel(container: MsPortalFx.ViewModels.CommandContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$SettingsCommandViewModel$Contract>;
        DeleteCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<Resource$DeleteCommandViewModel$Contract>;
    }
    export interface ViewModelFactories {
        Browse(): ExtensionDefinition.BrowseViewModelFactories;
        Resource(): ExtensionDefinition.ResourceViewModelFactories;
    }
}
