/**
 * @file Source code generated by PDL compiler.
 * @version 1.0
 * @sdkversion 5.0.302.319 (production_sdk#058d65f.160330-1230)
 * @schemaversion 1.0.0.2
 */
/// <reference path="../TypeReferences.d.ts" />

import ExtensionDefinition = require ("./ExtensionDefinition");
import Assettypeviewmodel = require ("../Browse/ViewModels/AssetTypeViewModel");
import Deletecommandviewmodel = require ("../Resource/Summary/ViewModels/DeleteCommandViewModel");
import Settingscommandviewmodel = require ("../Resource/Summary/ViewModels/SettingsCommandViewModel");
import Apiaccountpricingtierlauncherextender = require ("../Resource/Pricing/ViewModels/ApiAccountPricingTierLauncherExtender");
import Pricingtierpartadapterviewmodel = require ("../Resource/Summary/ViewModels/PricingTierPartAdapterViewModel");
import Eventspartadapterviewmodel = require ("../Resource/Summary/ViewModels/EventsPartAdapterViewModel");
import Oxfordapitypebladeviewmodel = require ("../Resource/Create/ViewModels/OxfordApiTypeBladeViewModel");
import Oxfordcreatebladeviewmodel = require ("../Resource/Create/ViewModels/OxfordCreateBladeViewModel");
import Settingspartviewmodel = require ("../Resource/Settings/ViewModels/SettingsPartViewModel");
import Settingsbladeviewmodel = require ("../Resource/Settings/ViewModels/SettingsBladeViewModel");
import Quickstartpartviewmodel = require ("../Resource/QuickStart/ViewModels/QuickStartPartViewModel");
import Quickstartbladeviewmodel = require ("../Resource/QuickStart/ViewModels/QuickStartBladeViewModel");
import Resourcesummarypartviewmodel = require ("../Resource/Summary/ViewModels/ResourceSummaryPartViewModel");
import Resourcebladeviewmodel = require ("../Resource/Summary/ViewModels/ResourceBladeViewModel");
import Generatesecondarycommandviewmodel = require ("../Resource/KeyManagement/ViewModels/GenerateSecondaryCommandViewModel");
import Generateprimarycommandviewmodel = require ("../Resource/KeyManagement/ViewModels/GeneratePrimaryCommandViewModel");
import Keyspropertiespartviewmodel = require ("../Resource/KeyManagement/ViewModels/KeysPropertiesPartViewModel");
import Keysettingsbladeviewmodel = require ("../Resource/KeyManagement/ViewModels/KeySettingsBladeViewModel");
import Apiaccountspecpickerextender = require ("../Resource/Pricing/ViewModels/ApiAccountSpecPickerExtender");
import Apiaccountspecpickerbladeviewmodel = require ("../Resource/Pricing/ViewModels/ApiAccountSpecPickerBladeViewModel");
import Propertiespartviewmodel = require ("../Resource/Properties/ViewModels/PropertiesPartViewModel");
import Propertiesbladeviewmodel = require ("../Resource/Properties/ViewModels/PropertiesBladeViewModel");
import Apitypepartviewmodel = require ("../Resource/Create/ViewModels/ApiTypePartViewModel");
import Cognitiveservicesapitypebladeviewmodel = require ("../Resource/Create/ViewModels/CognitiveServicesApiTypeBladeViewModel");
import Creationlegalbladeviewmodel = require ("../Resource/Create/ViewModels/CreationLegalBladeViewModel");
import Cognitiveservicescreatebladeviewmodel = require ("../Resource/Create/ViewModels/CognitiveServicesCreateBladeViewModel");
import Resourcepartviewmodel = require ("../Browse/ViewModels/ResourcePartViewModel");
import Browse = require ("./../Browse/BrowseArea");
import Resource = require ("./../Resource/ResourceArea");
export = ViewModelFactories;
module ViewModelFactories {
    export class BrowseViewModelFactoriesBase extends FxImpl.Extension.ViewModelAreaFactoriesBase<Browse.DataContext> implements ExtensionDefinition.BrowseViewModelFactories,ExtensionDefinition.BrowseDataContextContainer {
        public ResourcePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$ResourcePartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Resourcepartviewmodel, ExtensionDefinition.Browse$ResourcePartViewModel$Contract>(
            "../Browse/ViewModels/ResourcePartViewModel",
            (providerModule) => new providerModule.ResourcePartViewModel(container, initialState, this.dataContext),
            require);
        }
        public AssetTypeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$AssetTypeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Assettypeviewmodel, ExtensionDefinition.Browse$AssetTypeViewModel$Contract>(
            "../Browse/ViewModels/AssetTypeViewModel",
            (providerModule) => new providerModule.AssetTypeViewModel(container, initialState, this.dataContext),
            require);
        }
    }
    export class ResourceViewModelFactoriesBase extends FxImpl.Extension.ViewModelAreaFactoriesBase<Resource.DataContext> implements ExtensionDefinition.ResourceViewModelFactories,ExtensionDefinition.ResourceDataContextContainer {
        public CognitiveServicesCreateBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CognitiveServicesCreateBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Cognitiveservicescreatebladeviewmodel, ExtensionDefinition.Resource$CognitiveServicesCreateBladeViewModel$Contract>(
            "../Resource/Create/ViewModels/CognitiveServicesCreateBladeViewModel",
            (providerModule) => new providerModule.CognitiveServicesCreateBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public CreationLegalBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CreationLegalBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Creationlegalbladeviewmodel, ExtensionDefinition.Resource$CreationLegalBladeViewModel$Contract>(
            "../Resource/Create/ViewModels/CreationLegalBladeViewModel",
            (providerModule) => new providerModule.CreationLegalBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public CognitiveServicesApiTypeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CognitiveServicesApiTypeBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Cognitiveservicesapitypebladeviewmodel, ExtensionDefinition.Resource$CognitiveServicesApiTypeBladeViewModel$Contract>(
            "../Resource/Create/ViewModels/CognitiveServicesApiTypeBladeViewModel",
            (providerModule) => new providerModule.CognitiveServicesApiTypeBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public ApiTypePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiTypePartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Apitypepartviewmodel, ExtensionDefinition.Resource$ApiTypePartViewModel$Contract>(
            "../Resource/Create/ViewModels/ApiTypePartViewModel",
            (providerModule) => new providerModule.ApiTypePartViewModel(container, initialState, this.dataContext),
            require);
        }
        public PropertiesBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Propertiesbladeviewmodel, ExtensionDefinition.Resource$PropertiesBladeViewModel$Contract>(
            "../Resource/Properties/ViewModels/PropertiesBladeViewModel",
            (providerModule) => new providerModule.PropertiesBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public PropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Propertiespartviewmodel, ExtensionDefinition.Resource$PropertiesPartViewModel$Contract>(
            "../Resource/Properties/ViewModels/PropertiesPartViewModel",
            (providerModule) => new providerModule.PropertiesPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public ApiAccountSpecPickerBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiAccountSpecPickerBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Apiaccountspecpickerbladeviewmodel, ExtensionDefinition.Resource$ApiAccountSpecPickerBladeViewModel$Contract>(
            "../Resource/Pricing/ViewModels/ApiAccountSpecPickerBladeViewModel",
            (providerModule) => new providerModule.ApiAccountSpecPickerBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public ApiAccountSpecPickerExtender(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiAccountSpecPickerExtender$Contract> {
            return this.loadViewModelAsync<typeof Apiaccountspecpickerextender, ExtensionDefinition.Resource$ApiAccountSpecPickerExtender$Contract>(
            "../Resource/Pricing/ViewModels/ApiAccountSpecPickerExtender",
            (providerModule) => new providerModule.ApiAccountSpecPickerExtender(container, initialState, this.dataContext),
            require);
        }
        public KeySettingsBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$KeySettingsBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Keysettingsbladeviewmodel, ExtensionDefinition.Resource$KeySettingsBladeViewModel$Contract>(
            "../Resource/KeyManagement/ViewModels/KeySettingsBladeViewModel",
            (providerModule) => new providerModule.KeySettingsBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public KeysPropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$KeysPropertiesPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Keyspropertiespartviewmodel, ExtensionDefinition.Resource$KeysPropertiesPartViewModel$Contract>(
            "../Resource/KeyManagement/ViewModels/KeysPropertiesPartViewModel",
            (providerModule) => new providerModule.KeysPropertiesPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public GeneratePrimaryCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$GeneratePrimaryCommandViewModel$Contract> {
            return this.loadViewModelAsync<typeof Generateprimarycommandviewmodel, ExtensionDefinition.Resource$GeneratePrimaryCommandViewModel$Contract>(
            "../Resource/KeyManagement/ViewModels/GeneratePrimaryCommandViewModel",
            (providerModule) => new providerModule.GeneratePrimaryCommandViewModel(container, initialState, this.dataContext),
            require);
        }
        public GenerateSecondaryCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$GenerateSecondaryCommandViewModel$Contract> {
            return this.loadViewModelAsync<typeof Generatesecondarycommandviewmodel, ExtensionDefinition.Resource$GenerateSecondaryCommandViewModel$Contract>(
            "../Resource/KeyManagement/ViewModels/GenerateSecondaryCommandViewModel",
            (providerModule) => new providerModule.GenerateSecondaryCommandViewModel(container, initialState, this.dataContext),
            require);
        }
        public ResourceBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Resourcebladeviewmodel, ExtensionDefinition.Resource$ResourceBladeViewModel$Contract>(
            "../Resource/Summary/ViewModels/ResourceBladeViewModel",
            (providerModule) => new providerModule.ResourceBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public ResourceSummaryPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceSummaryPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Resourcesummarypartviewmodel, ExtensionDefinition.Resource$ResourceSummaryPartViewModel$Contract>(
            "../Resource/Summary/ViewModels/ResourceSummaryPartViewModel",
            (providerModule) => new providerModule.ResourceSummaryPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public QuickStartBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$QuickStartBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Quickstartbladeviewmodel, ExtensionDefinition.Resource$QuickStartBladeViewModel$Contract>(
            "../Resource/QuickStart/ViewModels/QuickStartBladeViewModel",
            (providerModule) => new providerModule.QuickStartBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public QuickStartPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$QuickStartPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Quickstartpartviewmodel, ExtensionDefinition.Resource$QuickStartPartViewModel$Contract>(
            "../Resource/QuickStart/ViewModels/QuickStartPartViewModel",
            (providerModule) => new providerModule.QuickStartPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public SettingsBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$SettingsBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Settingsbladeviewmodel, ExtensionDefinition.Resource$SettingsBladeViewModel$Contract>(
            "../Resource/Settings/ViewModels/SettingsBladeViewModel",
            (providerModule) => new providerModule.SettingsBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public SettingsPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$SettingsPartViewModel$Contract> {
            return this.loadViewModelAsync<typeof Settingspartviewmodel, ExtensionDefinition.Resource$SettingsPartViewModel$Contract>(
            "../Resource/Settings/ViewModels/SettingsPartViewModel",
            (providerModule) => new providerModule.SettingsPartViewModel(container, initialState, this.dataContext),
            require);
        }
        public BlankBladeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$BlankBladeBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Settingsbladeviewmodel, ExtensionDefinition.Resource$BlankBladeBladeViewModel$Contract>(
            "../Resource/Settings/ViewModels/SettingsBladeViewModel",
            (providerModule) => new providerModule.BlankBladeBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public OxfordCreateBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$OxfordCreateBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Oxfordcreatebladeviewmodel, ExtensionDefinition.Resource$OxfordCreateBladeViewModel$Contract>(
            "../Resource/Create/ViewModels/OxfordCreateBladeViewModel",
            (providerModule) => new providerModule.OxfordCreateBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public OxfordApiTypeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$OxfordApiTypeBladeViewModel$Contract> {
            return this.loadViewModelAsync<typeof Oxfordapitypebladeviewmodel, ExtensionDefinition.Resource$OxfordApiTypeBladeViewModel$Contract>(
            "../Resource/Create/ViewModels/OxfordApiTypeBladeViewModel",
            (providerModule) => new providerModule.OxfordApiTypeBladeViewModel(container, initialState, this.dataContext),
            require);
        }
        public EventsPartAdapterViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$EventsPartAdapterViewModel$Contract> {
            return this.loadViewModelAsync<typeof Eventspartadapterviewmodel, ExtensionDefinition.Resource$EventsPartAdapterViewModel$Contract>(
            "../Resource/Summary/ViewModels/EventsPartAdapterViewModel",
            (providerModule) => new providerModule.EventsPartAdapterViewModel(container, initialState, this.dataContext),
            require);
        }
        public PricingTierPartAdapterViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PricingTierPartAdapterViewModel$Contract> {
            return this.loadViewModelAsync<typeof Pricingtierpartadapterviewmodel, ExtensionDefinition.Resource$PricingTierPartAdapterViewModel$Contract>(
            "../Resource/Summary/ViewModels/PricingTierPartAdapterViewModel",
            (providerModule) => new providerModule.PricingTierPartAdapterViewModel(container, initialState, this.dataContext),
            require);
        }
        public ApiAccountPricingTierV3LauncherExtender(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiAccountPricingTierV3LauncherExtender$Contract> {
            return this.loadViewModelAsync<typeof Apiaccountpricingtierlauncherextender, ExtensionDefinition.Resource$ApiAccountPricingTierV3LauncherExtender$Contract>(
            "../Resource/Pricing/ViewModels/ApiAccountPricingTierLauncherExtender",
            (providerModule) => new providerModule.ApiAccountPricingTierV3LauncherExtender(container, initialState, this.dataContext),
            require);
        }
        public SettingsCommandViewModel(container: MsPortalFx.ViewModels.CommandContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$SettingsCommandViewModel$Contract> {
            return this.loadViewModelAsync<typeof Settingscommandviewmodel, ExtensionDefinition.Resource$SettingsCommandViewModel$Contract>(
            "../Resource/Summary/ViewModels/SettingsCommandViewModel",
            (providerModule) => new providerModule.SettingsCommandViewModel(container, initialState, this.dataContext),
            require);
        }
        public DeleteCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$DeleteCommandViewModel$Contract> {
            return this.loadViewModelAsync<typeof Deletecommandviewmodel, ExtensionDefinition.Resource$DeleteCommandViewModel$Contract>(
            "../Resource/Summary/ViewModels/DeleteCommandViewModel",
            (providerModule) => new providerModule.DeleteCommandViewModel(container, initialState, this.dataContext),
            require);
        }
    }
    export class ViewModelFactoriesBase implements ExtensionDefinition.ViewModelFactories {
        private _BrowseViewModelFactories: ExtensionDefinition.BrowseViewModelFactories;
        public SetBrowseViewModelFactories(factories: ExtensionDefinition.BrowseViewModelFactories): void {
            this._BrowseViewModelFactories = factories;
        }
        public Browse(): ExtensionDefinition.BrowseViewModelFactories {
            this._BrowseViewModelFactories = this._BrowseViewModelFactories || new BrowseViewModelFactoriesBase();
            return this._BrowseViewModelFactories;
        }
        public Browse$ResourcePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$ResourcePartViewModel$Contract> {
            return this.Browse().ResourcePartViewModel(container, initialState);
        }
        private _ResourceViewModelFactories: ExtensionDefinition.ResourceViewModelFactories;
        public SetResourceViewModelFactories(factories: ExtensionDefinition.ResourceViewModelFactories): void {
            this._ResourceViewModelFactories = factories;
        }
        public Resource(): ExtensionDefinition.ResourceViewModelFactories {
            this._ResourceViewModelFactories = this._ResourceViewModelFactories || new ResourceViewModelFactoriesBase();
            return this._ResourceViewModelFactories;
        }
        public Resource$CognitiveServicesCreateBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CognitiveServicesCreateBladeViewModel$Contract> {
            return this.Resource().CognitiveServicesCreateBladeViewModel(container, initialState);
        }
        public Resource$CreationLegalBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CreationLegalBladeViewModel$Contract> {
            return this.Resource().CreationLegalBladeViewModel(container, initialState);
        }
        public Resource$CognitiveServicesApiTypeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$CognitiveServicesApiTypeBladeViewModel$Contract> {
            return this.Resource().CognitiveServicesApiTypeBladeViewModel(container, initialState);
        }
        public Resource$ApiTypePartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiTypePartViewModel$Contract> {
            return this.Resource().ApiTypePartViewModel(container, initialState);
        }
        public Resource$PropertiesBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesBladeViewModel$Contract> {
            return this.Resource().PropertiesBladeViewModel(container, initialState);
        }
        public Resource$PropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PropertiesPartViewModel$Contract> {
            return this.Resource().PropertiesPartViewModel(container, initialState);
        }
        public Resource$ApiAccountSpecPickerBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiAccountSpecPickerBladeViewModel$Contract> {
            return this.Resource().ApiAccountSpecPickerBladeViewModel(container, initialState);
        }
        public Resource$ApiAccountSpecPickerExtender(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiAccountSpecPickerExtender$Contract> {
            return this.Resource().ApiAccountSpecPickerExtender(container, initialState);
        }
        public Resource$KeySettingsBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$KeySettingsBladeViewModel$Contract> {
            return this.Resource().KeySettingsBladeViewModel(container, initialState);
        }
        public Resource$KeysPropertiesPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$KeysPropertiesPartViewModel$Contract> {
            return this.Resource().KeysPropertiesPartViewModel(container, initialState);
        }
        public Resource$GeneratePrimaryCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$GeneratePrimaryCommandViewModel$Contract> {
            return this.Resource().GeneratePrimaryCommandViewModel(container, initialState);
        }
        public Resource$GenerateSecondaryCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$GenerateSecondaryCommandViewModel$Contract> {
            return this.Resource().GenerateSecondaryCommandViewModel(container, initialState);
        }
        public Resource$ResourceBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceBladeViewModel$Contract> {
            return this.Resource().ResourceBladeViewModel(container, initialState);
        }
        public Resource$ResourceSummaryPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ResourceSummaryPartViewModel$Contract> {
            return this.Resource().ResourceSummaryPartViewModel(container, initialState);
        }
        public Resource$QuickStartBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$QuickStartBladeViewModel$Contract> {
            return this.Resource().QuickStartBladeViewModel(container, initialState);
        }
        public Resource$QuickStartPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$QuickStartPartViewModel$Contract> {
            return this.Resource().QuickStartPartViewModel(container, initialState);
        }
        public Resource$SettingsBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$SettingsBladeViewModel$Contract> {
            return this.Resource().SettingsBladeViewModel(container, initialState);
        }
        public Resource$SettingsPartViewModel(container: MsPortalFx.ViewModels.PartContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$SettingsPartViewModel$Contract> {
            return this.Resource().SettingsPartViewModel(container, initialState);
        }
        public Resource$BlankBladeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$BlankBladeBladeViewModel$Contract> {
            return this.Resource().BlankBladeBladeViewModel(container, initialState);
        }
        public Resource$OxfordCreateBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$OxfordCreateBladeViewModel$Contract> {
            return this.Resource().OxfordCreateBladeViewModel(container, initialState);
        }
        public Resource$OxfordApiTypeBladeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$OxfordApiTypeBladeViewModel$Contract> {
            return this.Resource().OxfordApiTypeBladeViewModel(container, initialState);
        }
        public Resource$EventsPartAdapterViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$EventsPartAdapterViewModel$Contract> {
            return this.Resource().EventsPartAdapterViewModel(container, initialState);
        }
        public Resource$PricingTierPartAdapterViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$PricingTierPartAdapterViewModel$Contract> {
            return this.Resource().PricingTierPartAdapterViewModel(container, initialState);
        }
        public Resource$ApiAccountPricingTierV3LauncherExtender(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$ApiAccountPricingTierV3LauncherExtender$Contract> {
            return this.Resource().ApiAccountPricingTierV3LauncherExtender(container, initialState);
        }
        public Resource$SettingsCommandViewModel(container: MsPortalFx.ViewModels.CommandContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$SettingsCommandViewModel$Contract> {
            return this.Resource().SettingsCommandViewModel(container, initialState);
        }
        public Resource$DeleteCommandViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Resource$DeleteCommandViewModel$Contract> {
            return this.Resource().DeleteCommandViewModel(container, initialState);
        }
        public Browse$AssetTypeViewModel(container: MsPortalFx.ViewModels.ContainerContract, initialState?: any): MsPortalFx.Base.PromiseV<ExtensionDefinition.Browse$AssetTypeViewModel$Contract> {
            return this.Browse().AssetTypeViewModel(container, initialState);
        }
    }
}
